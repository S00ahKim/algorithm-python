'''
2. 도미노는 1 x 2 모양의 사각형 하나를 뜻한다. 
가로의 길이 n, 세로의 길이 2인 사각형을 도미노로 채우는 방법의 수는 총 몇 가지인지 계산하는 알고리즘을 동적 프로그래밍으로 작성하시오. 
최적 부분 구조를 먼저 찾아내고, 이를 실현하는 알고리즘을 작성하시오. 
------------------------------------------------------------------------------------
DP를 풀 때 수열의 점화식을 푸는 것처럼 일단 n=1, 2, 3, 4... 에 대해서 답을 구해보고 (최소 4까진 구해봐야 함)
규칙을 파악하면 재귀로 구현할 수 있는 경우가 있는데 이 문제가 그 경우임.
풀어보면 1,2,3,5,... 로 나오는데, 이는 피보나치처럼 이전 두 수 = 지금 답이 되는 경우.

최적 부분 구조는 설계하는 재귀 함수의 파라미터로 가장 필수적인 값만 넘겨주는 부분 문제의 구조인데,
여기서는 n만큼 가로 길이가 있을 때, 이미 완성된 부분이 있다고 가정하고 끝을 채우는 방식이
눕히는 경우/세우는 경우로 분리하여 생각한다. 눕히려면 2칸, 세우려면 1칸이 필요하다.
즉 c(n)을 구하려면 c(n-1)+c(n-2)를 더해주는 경우라고 보면 된다. (n-1이 세우는 것, n-2가 눕히는 것)
'''
# 메모이제이션 활용
def domino(n): 
    val = [1,2] 
    if n <= 2: 
        return n
    else: 
        for i in range(2, n+1): 
            val.append(val[i-1] + val[i-2]) 
        return val[n]

print(domino(int(input())))

# 슬라이딩 윈도우 활용: 저장 공간의 효율적인 사용
def domino2(n):
    if n <= 2: 
        return n 
    v0, v1 = 1, 2 
    for _ in range(n-1): 
        v2 = v1 + v0 
        v0, v1 = v1, v2 
    return v2

print(domino2(int(input())))